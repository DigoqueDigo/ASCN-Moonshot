---
- name: Create a ConfigMap for Postgres
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'templates/postgres/postgres-config.yml') | from_yaml }}"
    wait: true
    wait_timeout: 120

- name: Create a Secret for Postgres
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'templates/postgres/postgres-secret.yml') | from_yaml }}"
    wait: true
    wait_timeout: 120

- name: Create a Storage Class for Postgres
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'templates/postgres/postgres-storage-class.yml') | from_yaml }}"
    wait: true
    wait_timeout: 120

- name: Create a PVC for Postgres
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'templates/postgres/postgres-pvc.yml') | from_yaml }}"
    wait: true
    wait_timeout: 120

- name: Create a Deployment for Postgres
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'templates/postgres/postgres-deployment.yml') | from_yaml }}"
    wait: true
    wait_timeout: 120

- name: Create a Service for exposing Postgres
  kubernetes.core.k8s:
    state: present
    definition: "{{ lookup('template', 'templates/postgres/postgres-service.yml') | from_yaml }}"
    wait: true
    wait_timeout: 120

- name: Wait till Postgres pod is created
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: default
    label_selectors:
      - app=postgres
    wait: true
    wait_sleep: 5
    wait_timeout: 180
  register: postgres_pod_info

- name: Search for a pod with label app=postgres
  kubernetes.core.k8s_info:
    kind: Pod
    label_selectors:
      - app=postgres
  register: postgres_pod
  until: postgres_pod.resources[0].status.phase == "Running"
  retries: 20
  delay: 5

- name: Print the name of the Postgres pod 
  debug: msg="{{ postgres_pod.resources[0].metadata.name }}"

- name: Wait till Postgres is ready to accept connections
  kubernetes.core.k8s_exec:
    namespace: default
    pod: "{{ postgres_pod_info.resources[0].metadata.name }}"
    command: pg_isready --dbname={{ db_name }} --host={{ db_host }} --port=5432 --username={{ db_username }}
  register: postgres_status
  retries: 3
  delay: 10
  until: postgres_status.rc == 0